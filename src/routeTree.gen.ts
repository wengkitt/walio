/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignUpImport } from './routes/sign-up'
import { Route as SignInImport } from './routes/sign-in'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedLayoutImport } from './routes/protected/_layout'
import { Route as ProtectedLayoutIndexImport } from './routes/protected/_layout.index'

// Create Virtual Routes

const ProtectedImport = createFileRoute('/protected')()

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: '/protected',
  path: '/protected',
  getParentRoute: () => rootRoute,
} as any)

const SignUpRoute = SignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedLayoutIndexRoute = ProtectedLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpImport
      parentRoute: typeof rootRoute
    }
    '/protected': {
      id: '/protected'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/protected/_layout': {
      id: '/protected/_layout'
      path: '/protected'
      fullPath: '/protected'
      preLoaderRoute: typeof ProtectedLayoutImport
      parentRoute: typeof ProtectedRoute
    }
    '/protected/_layout/': {
      id: '/protected/_layout/'
      path: '/'
      fullPath: '/protected/'
      preLoaderRoute: typeof ProtectedLayoutIndexImport
      parentRoute: typeof ProtectedLayoutImport
    }
  }
}

// Create and export the route tree

interface ProtectedLayoutRouteChildren {
  ProtectedLayoutIndexRoute: typeof ProtectedLayoutIndexRoute
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedLayoutIndexRoute: ProtectedLayoutIndexRoute,
}

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
)

interface ProtectedRouteChildren {
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/protected': typeof ProtectedLayoutRouteWithChildren
  '/protected/': typeof ProtectedLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/protected': typeof ProtectedLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/protected': typeof ProtectedRouteWithChildren
  '/protected/_layout': typeof ProtectedLayoutRouteWithChildren
  '/protected/_layout/': typeof ProtectedLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/sign-up' | '/protected' | '/protected/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/sign-up' | '/protected'
  id:
    | '__root__'
    | '/'
    | '/sign-in'
    | '/sign-up'
    | '/protected'
    | '/protected/_layout'
    | '/protected/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/sign-in",
        "/sign-up",
        "/protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/sign-up": {
      "filePath": "sign-up.tsx"
    },
    "/protected": {
      "filePath": "protected",
      "children": [
        "/protected/_layout"
      ]
    },
    "/protected/_layout": {
      "filePath": "protected/_layout.tsx",
      "parent": "/protected",
      "children": [
        "/protected/_layout/"
      ]
    },
    "/protected/_layout/": {
      "filePath": "protected/_layout.index.tsx",
      "parent": "/protected/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
