/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LayoutImport } from "./routes/_layout";
import { Route as LayoutIndexImport } from "./routes/_layout.index";
import { Route as ProtectedLayoutImport } from "./routes/protected/_layout";
import { Route as LayoutSignUpImport } from "./routes/_layout.sign-up";
import { Route as LayoutSignInImport } from "./routes/_layout.sign-in";
import { Route as ProtectedLayoutIndexImport } from "./routes/protected/_layout.index";

// Create Virtual Routes

const ProtectedImport = createFileRoute("/protected")();

// Create/Update Routes

const ProtectedRoute = ProtectedImport.update({
  id: "/protected",
  path: "/protected",
  getParentRoute: () => rootRoute,
} as any);

const LayoutRoute = LayoutImport.update({
  id: "/_layout",
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexRoute = LayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => LayoutRoute,
} as any);

const ProtectedLayoutRoute = ProtectedLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => ProtectedRoute,
} as any);

const LayoutSignUpRoute = LayoutSignUpImport.update({
  id: "/sign-up",
  path: "/sign-up",
  getParentRoute: () => LayoutRoute,
} as any);

const LayoutSignInRoute = LayoutSignInImport.update({
  id: "/sign-in",
  path: "/sign-in",
  getParentRoute: () => LayoutRoute,
} as any);

const ProtectedLayoutIndexRoute = ProtectedLayoutIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProtectedLayoutRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_layout": {
      id: "/_layout";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    "/_layout/sign-in": {
      id: "/_layout/sign-in";
      path: "/sign-in";
      fullPath: "/sign-in";
      preLoaderRoute: typeof LayoutSignInImport;
      parentRoute: typeof LayoutImport;
    };
    "/_layout/sign-up": {
      id: "/_layout/sign-up";
      path: "/sign-up";
      fullPath: "/sign-up";
      preLoaderRoute: typeof LayoutSignUpImport;
      parentRoute: typeof LayoutImport;
    };
    "/protected": {
      id: "/protected";
      path: "/protected";
      fullPath: "/protected";
      preLoaderRoute: typeof ProtectedImport;
      parentRoute: typeof rootRoute;
    };
    "/protected/_layout": {
      id: "/protected/_layout";
      path: "/protected";
      fullPath: "/protected";
      preLoaderRoute: typeof ProtectedLayoutImport;
      parentRoute: typeof ProtectedRoute;
    };
    "/_layout/": {
      id: "/_layout/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof LayoutIndexImport;
      parentRoute: typeof LayoutImport;
    };
    "/protected/_layout/": {
      id: "/protected/_layout/";
      path: "/";
      fullPath: "/protected/";
      preLoaderRoute: typeof ProtectedLayoutIndexImport;
      parentRoute: typeof ProtectedLayoutImport;
    };
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutSignInRoute: typeof LayoutSignInRoute;
  LayoutSignUpRoute: typeof LayoutSignUpRoute;
  LayoutIndexRoute: typeof LayoutIndexRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSignInRoute: LayoutSignInRoute,
  LayoutSignUpRoute: LayoutSignUpRoute,
  LayoutIndexRoute: LayoutIndexRoute,
};

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren);

interface ProtectedLayoutRouteChildren {
  ProtectedLayoutIndexRoute: typeof ProtectedLayoutIndexRoute;
}

const ProtectedLayoutRouteChildren: ProtectedLayoutRouteChildren = {
  ProtectedLayoutIndexRoute: ProtectedLayoutIndexRoute,
};

const ProtectedLayoutRouteWithChildren = ProtectedLayoutRoute._addFileChildren(
  ProtectedLayoutRouteChildren,
);

interface ProtectedRouteChildren {
  ProtectedLayoutRoute: typeof ProtectedLayoutRouteWithChildren;
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedLayoutRoute: ProtectedLayoutRouteWithChildren,
};

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
);

export interface FileRoutesByFullPath {
  "": typeof LayoutRouteWithChildren;
  "/sign-in": typeof LayoutSignInRoute;
  "/sign-up": typeof LayoutSignUpRoute;
  "/protected": typeof ProtectedLayoutRouteWithChildren;
  "/": typeof LayoutIndexRoute;
  "/protected/": typeof ProtectedLayoutIndexRoute;
}

export interface FileRoutesByTo {
  "/sign-in": typeof LayoutSignInRoute;
  "/sign-up": typeof LayoutSignUpRoute;
  "/protected": typeof ProtectedLayoutIndexRoute;
  "/": typeof LayoutIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_layout": typeof LayoutRouteWithChildren;
  "/_layout/sign-in": typeof LayoutSignInRoute;
  "/_layout/sign-up": typeof LayoutSignUpRoute;
  "/protected": typeof ProtectedRouteWithChildren;
  "/protected/_layout": typeof ProtectedLayoutRouteWithChildren;
  "/_layout/": typeof LayoutIndexRoute;
  "/protected/_layout/": typeof ProtectedLayoutIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "" | "/sign-in" | "/sign-up" | "/protected" | "/" | "/protected/";
  fileRoutesByTo: FileRoutesByTo;
  to: "/sign-in" | "/sign-up" | "/protected" | "/";
  id:
    | "__root__"
    | "/_layout"
    | "/_layout/sign-in"
    | "/_layout/sign-up"
    | "/protected"
    | "/protected/_layout"
    | "/_layout/"
    | "/protected/_layout/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
  ProtectedRoute: typeof ProtectedRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/protected"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/sign-in",
        "/_layout/sign-up",
        "/_layout/"
      ]
    },
    "/_layout/sign-in": {
      "filePath": "_layout.sign-in.tsx",
      "parent": "/_layout"
    },
    "/_layout/sign-up": {
      "filePath": "_layout.sign-up.tsx",
      "parent": "/_layout"
    },
    "/protected": {
      "filePath": "protected",
      "children": [
        "/protected/_layout"
      ]
    },
    "/protected/_layout": {
      "filePath": "protected/_layout.tsx",
      "parent": "/protected",
      "children": [
        "/protected/_layout/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout.index.tsx",
      "parent": "/_layout"
    },
    "/protected/_layout/": {
      "filePath": "protected/_layout.index.tsx",
      "parent": "/protected/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
